---
- hosts: all
  become: yes
  become_method: sudo
  vars_files:
    - vars/default.yml
  tasks:
  - name: 1. Update OS
    command: apt update
    
  - name: 2. Add the intermediate certificate to certificate bundle
    command: update-ca-certificates

  - name: 3. Install aptitude using apt
    apt: name=aptitude state=latest update_cache=yes force_apt_get=yes

  - name: 4. Install common required system packages
    apt: name={{ common_required_packages }} state=latest update_cache=yes

  - name: 5. Install required system packages for docker
    apt: name={{ docker_required_packages }} state=latest update_cache=yes

  - name: 6. Install Python modules
    pip:
      name:
        - boto3
        - awscli
        - RBTools
      executable: pip3 

  - name: 7.1. Install Docker - add gpg key
    apt_key:
      url: "{{ docker_gpg_url }}"
      state: present

  - name: 7.2. Install Docker - add apt repo
    apt_repository:
      repo: "{{ docker_apt_repo }}"
      state: present

  - name: 7.3. Install Docker
    apt: name={{ docker_packages }} state=latest update_cache=yes

  - name: 7.4. Install Docker - module for Python
    pip:
      name: docker
      executable: pip3

  - name: 7.5. Install Docker - Add adminstrator to docker group
    user:
      name: "{{ admin_user }}"
      groups: docker
      append: yes

  - name: 7.6. Install Docker - Install Docker Compose
    get_url:
      url: "{{ docker_compose_url }}"
      dest: /usr/local/bin/docker-compose
      mode: u+x,g+x,o+x

  - name: 8. Add terraform gpg key & dist repo
    shell: |
      sudo apt update && sudo apt install gpg
      wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
      gpg --no-default-keyring --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg --fingerprint
      echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list

  - name: 9.1. Add nodejs gpg key
    apt_key:
      url: "{{ nodejs_gpg_url }}"
      state: present

  - name: 9.2. Add nodejs 18.x repo for Ubuntu 22
    apt_repository:
      repo: "{{ nodejs_apt_repo }}"
      state: present

  - name: 10. apt update
    command: apt update

  - name: 11. Install build & cicd tool packages
    apt: name={{ build_cicd_tool_packages }} state=latest update_cache=yes

  - name: 12. Install AWS Session Manager
    shell: |
      curl "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_64bit/session-manager-plugin.deb" -o "session-manager-plugin.deb"
      dpkg -i session-manager-plugin.deb

  - name: 13.1. Create ssh dir
    ansible.builtin.file:
      path: /home/vagrant/.ssh
      state: directory
      owner: vagrant
      group: vagrant
      mode: '0700'

  - name: 13.2. Copy ssh private key
    copy:
      src: /home/vagrant/shared_vagrant/.ssh/{{ item }}
      dest: /home/vagrant/.ssh/
      owner: vagrant
      group: vagrant
      mode: '0600'
      remote_src: yes
    with_items:
      - id_rsa
      - id_ed25519

  - name: 13.2. Copy ssh pub key 
    copy:
      src: /home/vagrant/shared_vagrant/.ssh/{{ item }}
      dest: /home/vagrant/.ssh/
      owner: vagrant
      group: vagrant
      mode: '0644'
      remote_src: yes
    with_items:
      - id_rsa.pub
      - id_ed25519.pub

  - name: 14.1. Create aws dir
    ansible.builtin.file:
      path: /home/vagrant/.aws
      state: directory
      owner: vagrant
      group: vagrant
      mode: '0700'

  - name: 14.2. Copy AWS config and cred files
    copy:
      src: /home/vagrant/shared_vagrant/.aws/{{ item }}
      dest: /home/vagrant/.aws/
      owner: vagrant
      group: vagrant
      mode: '0600'
      remote_src: yes
    with_items:
      - config
      - credentials

  - name: 15. Update authorized_key
    shell: |
      cat /home/vagrant/.ssh/id_rsa.pub >> /home/vagrant/.ssh/authorized_keys
      cat /home/vagrant/.ssh/id_ed25519.pub >> /home/vagrant/.ssh/authorized_keys

  # - name: 16. Create bashrc alias
  #   shell: |
  #     echo "source ~/shared_vagrant/scripts/ph2-environment-manager.sh au staging" >> /home/vagrant/.bashrc
  #     echo "alias commit='source ~/shared_vagrant/scripts/commit.sh'" >> /home/vagrant/.bashrc
  #     echo "alias ph2='source ~/shared_vagrant/scripts/ph2-environment-manager.sh'" >> /home/vagrant/.bashrc   
  #     echo "alias s1='export AWS_PROFILE=ph2-stg && aws ssm start-session --region ap-southeast-2 --output table --target i-0c88681db12d4202d'" >> /home/vagrant/.bashrc

  - name: 17. Create project dir
    ansible.builtin.file:
      path: /home/vagrant/projects
      state: directory
      owner: vagrant
      group: vagrant
      mode: '0775'

  - name: 18. Install Apache
    shell: |
      # Install
        if ! command -v apache2 &> /dev/null; then
          sudo apt update
          sudo apt-get install -y apache2
        fi

      # Allow firewall 
      sudo ufw app list
      sudo ufw allow 'Apache'

  - name: 19. Create folder domain apache2
    ansible.builtin.file:
      path: /var/www/{{ your_domain }}
      state: directory
      owner: vagrant
      group: vagrant
      mode: '0755'

  - name: 20. Config VirtualHost
    shell: |
      # Create file test
      echo "<html>
        <head>
            <title>Welcome to {{ your_domain }}!</title>
        </head>
        <body>
            <h1>Success! The {{ your_domain }} virtual host is working!</h1>
        </body>
      </html>" | sudo tee /var/www/{{ your_domain }}/index.html > /dev/null

      # Config test
      echo "<VirtualHost *:80>
        ServerAdmin webmaster@localhost
        ServerName {{ your_domain }}
        ServerAlias www.{{ your_domain }}
        DocumentRoot /var/www/{{ your_domain }}
        ErrorLog ${APACHE_LOG_DIR}/error.log
        CustomLog ${APACHE_LOG_DIR}/access.log combined
      </VirtualHost>" | sudo tee /etc/apache2/sites-available/{{ your_domain }}.conf > /dev/null

      # Enable your_domain
      sudo a2ensite {{ your_domain }}.conf
      sudo a2dissite 000-default.conf
      sudo apache2ctl configtest

      # Restart apache 2
      sudo systemctl restart apache2

  - name: 21. Add domain to /etc/hosts
    shell: |
      echo "127.0.0.1 {{your_domain}}" | sudo tee --append /etc/hosts > /dev/null

  - name: 22. Install & config logrotate
    shell: |
      # Install
      if ! command -v logrotate &> /dev/null; then
        sudo apt update
        sudo apt-get install -y logrotate
      fi

      # Configure
      echo "/var/log/apache2/*.log {
            daily
            missingok
            rotate 14
            compress
            notifempty
            create 0640 www-data www-data
            sharedscripts
            postrotate
              systemctl reload apache2
            endscript
          }" | sudo tee /etc/logrotate.d/apache2 > /dev/null

      sudo chmod 755 /var/log/apache2
      sudo chmod 755 /var/log/apache2/*.log

  - name: 23. Create bucket s3
    shell: |
      bucket_name=dc11-quoctran-devopstraining-apache2log
      exists=$(aws s3 ls | awk '{print $NF}' | grep -w 'dc11-quoctran-devopstraining-apache2log' && echo "Found Bucket" || true)
      if [ -z "$exists" ]; then
        region=$(aws configure get region --profile default)
        aws s3api create-bucket --bucket "${bucket_name}" --create-bucket-configuration LocationConstraint="${region}"
      fi
    become: yes
    become_user: vagrant

  - name: 24. Create crontab push log to s3
    shell: |
      # Write and save script to file log-apache2.sh
      echo "if [ \$(ls /var/log/apache2/*.log | wc -l) -gt 5 ]; then
              aws s3 cp /var/log/apache2/\$(ls -t /var/log/apache2/*.log | tail -1 | xargs -n 1 basename) s3://dc11-quoctran-devopstraining-apache2log/;
            fi" | sudo tee /usr/local/bin/log-apache2.sh
      
      chmod 755 /usr/local/bin/log-apache2.sh

      # Add to crontab
      exists=$(crontab -l | grep -q '*/10 .* .* .* .*  bash /usr/local/bin/log-apache2.sh' && echo "Found Crontab" || true)
      if [ -z "$exists" ]; then
          (crontab -l ; echo "*/10 * * * *  bash /usr/local/bin/log-apache2.sh ") | crontab -
      fi
    become: yes
    become_user: vagrant
    




      

